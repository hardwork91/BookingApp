// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[object Object] 1`] = `
Object {
  "airfields": Array [],
  "isSearching": false,
}
`;

exports[`AirfieldSearcher render as expected when conected component 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(AirfieldSearcher)
    airfields={
      Array [
        Object {
          "apicode": "ASP",
          "shortdisplayname": "Boston ASP",
        },
        Object {
          "apicode": "BDS",
          "shortdisplayname": "Bolivia BDS",
        },
      ]
    }
    clear={[Function]}
    clearSelectedData={[Function]}
    handleClearResults={[Function]}
    isSearching={false}
    onChange={[Function]}
    placeholder="From"
    search={[Function]}
    selectedData={
      Object {
        "ASP": Object {
          "shortdisplayname": "Boston ASP",
        },
        "BDS": Object {
          "shortdisplayname": "Bolivia BDS",
        },
      }
    }
    setSelectedData={[Function]}
    value={Array []}
  >
    <AirfieldSearcher
      airfields={Array []}
      clear={[Function]}
      clearSelectedData={[Function]}
      handleClearResults={[Function]}
      isSearching={false}
      onChange={[Function]}
      placeholder="From"
      search={[Function]}
      selectedData={
        Object {
          "ASP": Object {
            "shortdisplayname": "Boston ASP",
          },
          "BDS": Object {
            "shortdisplayname": "Bolivia BDS",
          },
        }
      }
      setSelectedData={[Function]}
      value={Array []}
    >
      <Tooltip
        arrowPointAtCenter={false}
        autoAdjustOverflow={true}
        mouseEnterDelay={1}
        mouseLeaveDelay={0.1}
        placement="top"
        title="Search for an airfield"
        transitionName="zoom-big-fast"
      >
        <Tooltip
          align={Object {}}
          arrowContent={null}
          arrowPointAtCenter={false}
          autoAdjustOverflow={true}
          builtinPlacements={
            Object {
              "bottom": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tc",
                  "bc",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "bottomLeft": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tl",
                  "bl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "bottomRight": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tr",
                  "br",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "left": Object {
                "ignoreShake": true,
                "offset": Array [
                  -4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "cr",
                  "cl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "leftBottom": Object {
                "ignoreShake": true,
                "offset": Array [
                  -4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "br",
                  "bl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "leftTop": Object {
                "ignoreShake": true,
                "offset": Array [
                  -4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tr",
                  "tl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "right": Object {
                "ignoreShake": true,
                "offset": Array [
                  4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "cl",
                  "cr",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "rightBottom": Object {
                "ignoreShake": true,
                "offset": Array [
                  4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bl",
                  "br",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "rightTop": Object {
                "ignoreShake": true,
                "offset": Array [
                  4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tl",
                  "tr",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "top": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bc",
                  "tc",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "topLeft": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bl",
                  "tl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "topRight": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "br",
                  "tr",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
            }
          }
          destroyTooltipOnHide={false}
          mouseEnterDelay={1}
          mouseLeaveDelay={0.1}
          onPopupAlign={[Function]}
          onVisibleChange={[Function]}
          overlay="Search for an airfield"
          placement="top"
          prefixCls="ant-tooltip"
          title="Search for an airfield"
          transitionName="zoom-big-fast"
          trigger={
            Array [
              "hover",
            ]
          }
          visible={false}
        >
          <Trigger
            action={
              Array [
                "hover",
              ]
            }
            afterPopupVisibleChange={[Function]}
            arrowContent={null}
            arrowPointAtCenter={false}
            autoAdjustOverflow={true}
            blurDelay={0.15}
            builtinPlacements={
              Object {
                "bottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tc",
                    "bc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomLeft": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomRight": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "left": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "cr",
                    "cl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "leftBottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "leftTop": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "right": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "cl",
                    "cr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "rightBottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "rightTop": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "top": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bc",
                    "tc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topLeft": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topRight": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
              }
            }
            defaultPopupVisible={false}
            destroyPopupOnHide={false}
            focusDelay={0}
            getDocument={[Function]}
            getPopupClassNameFromAlign={[Function]}
            hideAction={Array []}
            mask={false}
            maskClosable={true}
            mouseEnterDelay={1}
            mouseLeaveDelay={0.1}
            onPopupAlign={[Function]}
            onPopupVisibleChange={[Function]}
            overlay="Search for an airfield"
            popup={[Function]}
            popupAlign={Object {}}
            popupClassName=""
            popupPlacement="top"
            popupStyle={Object {}}
            popupTransitionName="zoom-big-fast"
            popupVisible={false}
            prefixCls="ant-tooltip"
            showAction={Array []}
            title="Search for an airfield"
            visible={false}
          >
            <div
              className="select-container"
              key="trigger"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              style={
                Object {
                  "width": "100%",
                }
              }
            >
              <Select
                choiceTransitionName="zoom"
                defaultActiveFirstOption={false}
                dropdownRender={[Function]}
                filterOption={false}
                mode="multiple"
                notFoundContent={null}
                onBlur={[Function]}
                onChange={[Function]}
                onDeselect={[Function]}
                onSearch={[Function]}
                onSelect={[Function]}
                optionLabelProp="shortdisplayname"
                placeholder="From"
                showArrow={false}
                showSearch={true}
                style={
                  Object {
                    "minWidth": 250,
                  }
                }
                transitionName="slide-up"
                value={Array []}
              >
                <Select
                  allowClear={false}
                  autoClearSearchValue={true}
                  backfill={false}
                  choiceTransitionName="zoom"
                  className=""
                  clearIcon={
                    <Icon
                      className="ant-select-clear-icon"
                      theme="filled"
                      type="close-circle"
                    />
                  }
                  combobox={false}
                  defaultActiveFirstOption={false}
                  defaultOpen={false}
                  dropdownMatchSelectWidth={true}
                  dropdownMenuStyle={Object {}}
                  dropdownRender={[Function]}
                  dropdownStyle={Object {}}
                  filterOption={false}
                  inputIcon={
                    <Icon
                      className="ant-select-arrow-icon"
                      type="down"
                    />
                  }
                  labelInValue={false}
                  menuItemSelectedIcon={
                    <Icon
                      className="ant-select-selected-icon"
                      type="check"
                    />
                  }
                  multiple={true}
                  notFoundContent={null}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onDeselect={[Function]}
                  onFocus={[Function]}
                  onInputKeyDown={[Function]}
                  onSearch={[Function]}
                  onSelect={[Function]}
                  optionFilterProp="value"
                  optionLabelProp="shortdisplayname"
                  placeholder="From"
                  prefixCls="ant-select"
                  removeIcon={
                    <Icon
                      className="ant-select-remove-icon"
                      type="close"
                    />
                  }
                  showAction={
                    Array [
                      "click",
                    ]
                  }
                  showArrow={false}
                  showSearch={true}
                  style={
                    Object {
                      "minWidth": 250,
                    }
                  }
                  tabIndex={0}
                  tags={false}
                  tokenSeparators={Array []}
                  transitionName="slide-up"
                  value={Array []}
                >
                  <SelectTrigger
                    ariaId="test-uuid"
                    backfillValue=""
                    combobox={false}
                    defaultActiveFirstOption={false}
                    dropdownMatchSelectWidth={true}
                    dropdownMenuStyle={Object {}}
                    dropdownRender={[Function]}
                    dropdownStyle={Object {}}
                    empty={false}
                    inputValue=""
                    menuItemSelectedIcon={
                      <Icon
                        className="ant-select-selected-icon"
                        type="check"
                      />
                    }
                    multiple={true}
                    onDropdownVisibleChange={[Function]}
                    onMenuDeselect={[Function]}
                    onMenuSelect={[Function]}
                    onPopupFocus={[Function]}
                    options={Array []}
                    prefixCls="ant-select"
                    showAction={
                      Array [
                        "click",
                      ]
                    }
                    showSearch={true}
                    transitionName="slide-up"
                    value={Array []}
                    visible={false}
                  >
                    <Trigger
                      action={Array []}
                      afterPopupVisibleChange={[Function]}
                      ariaId="test-uuid"
                      backfillValue=""
                      blurDelay={0.15}
                      builtinPlacements={
                        Object {
                          "bottomLeft": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 0,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tl",
                              "bl",
                            ],
                          },
                          "topLeft": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 0,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bl",
                              "tl",
                            ],
                          },
                        }
                      }
                      combobox={false}
                      defaultActiveFirstOption={false}
                      defaultPopupVisible={false}
                      destroyPopupOnHide={false}
                      dropdownMatchSelectWidth={true}
                      dropdownMenuStyle={Object {}}
                      dropdownRender={[Function]}
                      dropdownStyle={Object {}}
                      focusDelay={0}
                      getDocument={[Function]}
                      getPopupClassNameFromAlign={[Function]}
                      hideAction={
                        Array [
                          "blur",
                        ]
                      }
                      inputValue=""
                      mask={false}
                      maskClosable={true}
                      menuItemSelectedIcon={
                        <Icon
                          className="ant-select-selected-icon"
                          type="check"
                        />
                      }
                      mouseEnterDelay={0}
                      mouseLeaveDelay={0.1}
                      multiple={true}
                      onDropdownVisibleChange={[Function]}
                      onMenuDeselect={[Function]}
                      onMenuSelect={[Function]}
                      onPopupAlign={[Function]}
                      onPopupVisibleChange={[Function]}
                      options={Array []}
                      popup={
                        <div>
                          <DropdownMenu
                            ariaId="test-uuid"
                            backfillValue=""
                            defaultActiveFirstOption={false}
                            dropdownMenuStyle={Object {}}
                            firstActiveValue={undefined}
                            inputValue=""
                            menuItemSelectedIcon={
                              <Icon
                                className="ant-select-selected-icon"
                                type="check"
                              />
                            }
                            menuItems={Array []}
                            multiple={true}
                            onMenuDeselect={[Function]}
                            onMenuSelect={[Function]}
                            onPopupFocus={[Function]}
                            onPopupScroll={undefined}
                            prefixCls="ant-select-dropdown"
                            value={Array []}
                            visible={false}
                          />
                        </div>
                      }
                      popupAlign={Object {}}
                      popupClassName="ant-select-dropdown--multiple"
                      popupPlacement="bottomLeft"
                      popupStyle={Object {}}
                      popupTransitionName="slide-up"
                      popupVisible={false}
                      prefixCls="ant-select-dropdown"
                      showAction={
                        Array [
                          "click",
                        ]
                      }
                      showSearch={true}
                      transitionName="slide-up"
                      value={Array []}
                      visible={false}
                    >
                      <div
                        className="ant-select ant-select-enabled ant-select-no-arrow"
                        key="trigger"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseOut={[Function]}
                        onMouseUp={[Function]}
                        onTouchStart={[Function]}
                        style={
                          Object {
                            "minWidth": 250,
                          }
                        }
                      >
                        <div
                          aria-autocomplete="list"
                          aria-controls="test-uuid"
                          aria-expanded={false}
                          aria-haspopup="true"
                          className="ant-select-selection
                                    ant-select-selection--multiple"
                          key="selection"
                          role="combobox"
                        >
                          <div
                            className="ant-select-selection__rendered"
                          >
                            <div
                              className="ant-select-selection__placeholder"
                              onClick={[Function]}
                              onMouseDown={[Function]}
                              style={
                                Object {
                                  "WebkitUserSelect": "none",
                                  "display": "block",
                                  "userSelect": "none",
                                }
                              }
                              unselectable="on"
                            >
                              From
                            </div>
                            <Animate
                              animation={Object {}}
                              component="ul"
                              componentProps={Object {}}
                              onAppear={[Function]}
                              onEnd={[Function]}
                              onEnter={[Function]}
                              onLeave={[Function]}
                              transitionAppear={false}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="zoom"
                            >
                              <ul>
                                <AnimateChild
                                  animation={Object {}}
                                  key="__input"
                                  transitionAppear={false}
                                  transitionEnter={true}
                                  transitionLeave={true}
                                  transitionName="zoom"
                                >
                                  <li
                                    className="ant-select-search ant-select-search--inline"
                                    key="__input"
                                  >
                                    <div
                                      className="ant-select-search__field__wrap"
                                    >
                                      <input
                                        autoComplete="off"
                                        className="ant-select-search__field"
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        value=""
                                      />
                                      <span
                                        className="ant-select-search__field__mirror"
                                      >
                                         
                                      </span>
                                    </div>
                                  </li>
                                </AnimateChild>
                              </ul>
                            </Animate>
                          </div>
                        </div>
                      </div>
                    </Trigger>
                  </SelectTrigger>
                </Select>
              </Select>
            </div>
          </Trigger>
        </Tooltip>
      </Tooltip>
    </AirfieldSearcher>
  </Connect(AirfieldSearcher)>
</Provider>
`;

exports[`AirfieldSearcher render as expected when has selected the max number of airports allowed 1`] = `
<AirfieldSearcher
  airfields={
    Array [
      Object {
        "apicode": "ASP",
        "shortdisplayname": "Boston ASP",
      },
      Object {
        "apicode": "BDS",
        "shortdisplayname": "Bolivia BDS",
      },
    ]
  }
  clear={[Function]}
  clearSelectedData={[Function]}
  handleClearResults={[Function]}
  isSearching={false}
  onChange={[Function]}
  placeholder="From"
  search={[Function]}
  selectedData={
    Object {
      "ASP": Object {
        "shortdisplayname": "Boston ASP",
      },
      "BDS": Object {
        "shortdisplayname": "Bolivia BDS",
      },
    }
  }
  setSelectedData={[Function]}
  value={
    Array [
      "ASD",
      "NFV",
      "MMD",
    ]
  }
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    mouseEnterDelay={1}
    mouseLeaveDelay={0.1}
    placement="top"
    title="Search for an airfield"
    transitionName="zoom-big-fast"
  >
    <Tooltip
      align={Object {}}
      arrowContent={null}
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      builtinPlacements={
        Object {
          "bottom": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      destroyTooltipOnHide={false}
      mouseEnterDelay={1}
      mouseLeaveDelay={0.1}
      onPopupAlign={[Function]}
      onVisibleChange={[Function]}
      overlay="Search for an airfield"
      placement="top"
      prefixCls="ant-tooltip"
      title="Search for an airfield"
      transitionName="zoom-big-fast"
      trigger={
        Array [
          "hover",
        ]
      }
      visible={false}
    >
      <Trigger
        action={
          Array [
            "hover",
          ]
        }
        afterPopupVisibleChange={[Function]}
        arrowContent={null}
        arrowPointAtCenter={false}
        autoAdjustOverflow={true}
        blurDelay={0.15}
        builtinPlacements={
          Object {
            "bottom": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tc",
                "bc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomLeft": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomRight": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "left": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cr",
                "cl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftBottom": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftTop": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "right": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cl",
                "cr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightBottom": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightTop": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "top": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bc",
                "tc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topLeft": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topRight": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
          }
        }
        defaultPopupVisible={false}
        destroyPopupOnHide={false}
        focusDelay={0}
        getDocument={[Function]}
        getPopupClassNameFromAlign={[Function]}
        hideAction={Array []}
        mask={false}
        maskClosable={true}
        mouseEnterDelay={1}
        mouseLeaveDelay={0.1}
        onPopupAlign={[Function]}
        onPopupVisibleChange={[Function]}
        overlay="Search for an airfield"
        popup={[Function]}
        popupAlign={Object {}}
        popupClassName=""
        popupPlacement="top"
        popupStyle={Object {}}
        popupTransitionName="zoom-big-fast"
        popupVisible={false}
        prefixCls="ant-tooltip"
        showAction={Array []}
        title="Search for an airfield"
        visible={false}
      >
        <div
          className="select-container"
          key="trigger"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
        >
          <Select
            choiceTransitionName="zoom"
            defaultActiveFirstOption={false}
            dropdownRender={[Function]}
            filterOption={false}
            mode="multiple"
            notFoundContent={null}
            onBlur={[Function]}
            onChange={[Function]}
            onDeselect={[Function]}
            onSearch={[Function]}
            onSelect={[Function]}
            optionLabelProp="ap"
            placeholder="From"
            showArrow={false}
            showSearch={true}
            style={
              Object {
                "minWidth": 250,
              }
            }
            transitionName="slide-up"
            value={
              Array [
                "ASD",
                "NFV",
                "MMD",
              ]
            }
          >
            <Select
              allowClear={false}
              autoClearSearchValue={true}
              backfill={false}
              choiceTransitionName="zoom"
              className=""
              clearIcon={
                <Icon
                  className="ant-select-clear-icon"
                  theme="filled"
                  type="close-circle"
                />
              }
              combobox={false}
              defaultActiveFirstOption={false}
              defaultOpen={false}
              dropdownMatchSelectWidth={true}
              dropdownMenuStyle={Object {}}
              dropdownRender={[Function]}
              dropdownStyle={Object {}}
              filterOption={false}
              inputIcon={
                <Icon
                  className="ant-select-arrow-icon"
                  type="down"
                />
              }
              labelInValue={false}
              menuItemSelectedIcon={
                <Icon
                  className="ant-select-selected-icon"
                  type="check"
                />
              }
              multiple={true}
              notFoundContent={null}
              onBlur={[Function]}
              onChange={[Function]}
              onDeselect={[Function]}
              onFocus={[Function]}
              onInputKeyDown={[Function]}
              onSearch={[Function]}
              onSelect={[Function]}
              optionFilterProp="value"
              optionLabelProp="ap"
              placeholder="From"
              prefixCls="ant-select"
              removeIcon={
                <Icon
                  className="ant-select-remove-icon"
                  type="close"
                />
              }
              showAction={
                Array [
                  "click",
                ]
              }
              showArrow={false}
              showSearch={true}
              style={
                Object {
                  "minWidth": 250,
                }
              }
              tabIndex={0}
              tags={false}
              tokenSeparators={Array []}
              transitionName="slide-up"
              value={
                Array [
                  "ASD",
                  "NFV",
                  "MMD",
                ]
              }
            >
              <SelectTrigger
                ariaId="test-uuid"
                backfillValue=""
                combobox={false}
                defaultActiveFirstOption={false}
                dropdownMatchSelectWidth={true}
                dropdownMenuStyle={Object {}}
                dropdownRender={[Function]}
                dropdownStyle={Object {}}
                empty={false}
                inputValue=""
                menuItemSelectedIcon={
                  <Icon
                    className="ant-select-selected-icon"
                    type="check"
                  />
                }
                multiple={true}
                onDropdownVisibleChange={[Function]}
                onMenuDeselect={[Function]}
                onMenuSelect={[Function]}
                onPopupFocus={[Function]}
                options={Array []}
                prefixCls="ant-select"
                showAction={
                  Array [
                    "click",
                  ]
                }
                showSearch={true}
                transitionName="slide-up"
                value={
                  Array [
                    "ASD",
                    "NFV",
                    "MMD",
                  ]
                }
                visible={false}
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  ariaId="test-uuid"
                  backfillValue=""
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                    }
                  }
                  combobox={false}
                  defaultActiveFirstOption={false}
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  dropdownMatchSelectWidth={true}
                  dropdownMenuStyle={Object {}}
                  dropdownRender={[Function]}
                  dropdownStyle={Object {}}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={
                    Array [
                      "blur",
                    ]
                  }
                  inputValue=""
                  mask={false}
                  maskClosable={true}
                  menuItemSelectedIcon={
                    <Icon
                      className="ant-select-selected-icon"
                      type="check"
                    />
                  }
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  multiple={true}
                  onDropdownVisibleChange={[Function]}
                  onMenuDeselect={[Function]}
                  onMenuSelect={[Function]}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  options={Array []}
                  popup={
                    <div>
                      <DropdownMenu
                        ariaId="test-uuid"
                        backfillValue=""
                        defaultActiveFirstOption={false}
                        dropdownMenuStyle={Object {}}
                        firstActiveValue={undefined}
                        inputValue=""
                        menuItemSelectedIcon={
                          <Icon
                            className="ant-select-selected-icon"
                            type="check"
                          />
                        }
                        menuItems={Array []}
                        multiple={true}
                        onMenuDeselect={[Function]}
                        onMenuSelect={[Function]}
                        onPopupFocus={[Function]}
                        onPopupScroll={undefined}
                        prefixCls="ant-select-dropdown"
                        value={
                          Array [
                            "ASD",
                            "NFV",
                            "MMD",
                          ]
                        }
                        visible={false}
                      />
                      <div
                        style={
                          Object {
                            "marginBottom": 5,
                          }
                        }
                      >
                        <Divider
                          style={
                            Object {
                              "margin": "5px 0",
                            }
                          }
                        />
                        <Text
                          strong={true}
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        >
                          Maximun 3 airports
                        </Text>
                      </div>
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName="ant-select-dropdown--multiple"
                  popupPlacement="bottomLeft"
                  popupStyle={Object {}}
                  popupTransitionName="slide-up"
                  popupVisible={false}
                  prefixCls="ant-select-dropdown"
                  showAction={
                    Array [
                      "click",
                    ]
                  }
                  showSearch={true}
                  transitionName="slide-up"
                  value={
                    Array [
                      "ASD",
                      "NFV",
                      "MMD",
                    ]
                  }
                  visible={false}
                >
                  <div
                    className="ant-select ant-select-enabled ant-select-no-arrow"
                    key="trigger"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseUp={[Function]}
                    onTouchStart={[Function]}
                    style={
                      Object {
                        "minWidth": 250,
                      }
                    }
                  >
                    <div
                      aria-autocomplete="list"
                      aria-controls="test-uuid"
                      aria-expanded={false}
                      aria-haspopup="true"
                      className="ant-select-selection
                                ant-select-selection--multiple"
                      key="selection"
                      role="combobox"
                    >
                      <div
                        className="ant-select-selection__rendered"
                      >
                        <div
                          className="ant-select-selection__placeholder"
                          onClick={[Function]}
                          onMouseDown={[Function]}
                          style={
                            Object {
                              "WebkitUserSelect": "none",
                              "display": "none",
                              "userSelect": "none",
                            }
                          }
                          unselectable="on"
                        >
                          From
                        </div>
                        <Animate
                          animation={Object {}}
                          component="ul"
                          componentProps={Object {}}
                          onAppear={[Function]}
                          onEnd={[Function]}
                          onEnter={[Function]}
                          onLeave={[Function]}
                          transitionAppear={false}
                          transitionEnter={true}
                          transitionLeave={true}
                          transitionName="zoom"
                        >
                          <ul>
                            <AnimateChild
                              animation={Object {}}
                              key="ASD"
                              transitionAppear={false}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="zoom"
                            >
                              <li
                                className="ant-select-selection__choice"
                                key="ASD"
                                onMouseDown={[Function]}
                                role="presentation"
                                style={
                                  Object {
                                    "WebkitUserSelect": "none",
                                    "userSelect": "none",
                                  }
                                }
                                title="ASD"
                                unselectable="on"
                              >
                                <div
                                  className="ant-select-selection__choice__content"
                                >
                                  ASD
                                </div>
                                <span
                                  className="ant-select-selection__choice__remove"
                                  onClick={[Function]}
                                >
                                  <Icon
                                    className="ant-select-remove-icon"
                                    type="close"
                                  >
                                    <LocaleReceiver
                                      componentName="Icon"
                                    >
                                      <i
                                        aria-label="icon: close"
                                        className="anticon anticon-close ant-select-remove-icon"
                                      >
                                        <IconReact
                                          className=""
                                          type="close-o"
                                        >
                                          <svg
                                            aria-hidden="true"
                                            className=""
                                            data-icon="close"
                                            fill="currentColor"
                                            focusable="false"
                                            height="1em"
                                            key="svg-close"
                                            viewBox="64 64 896 896"
                                            width="1em"
                                          >
                                            <path
                                              d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                                              key="svg-close-svg-0"
                                            />
                                          </svg>
                                        </IconReact>
                                      </i>
                                    </LocaleReceiver>
                                  </Icon>
                                </span>
                              </li>
                            </AnimateChild>
                            <AnimateChild
                              animation={Object {}}
                              key="NFV"
                              transitionAppear={false}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="zoom"
                            >
                              <li
                                className="ant-select-selection__choice"
                                key="NFV"
                                onMouseDown={[Function]}
                                role="presentation"
                                style={
                                  Object {
                                    "WebkitUserSelect": "none",
                                    "userSelect": "none",
                                  }
                                }
                                title="NFV"
                                unselectable="on"
                              >
                                <div
                                  className="ant-select-selection__choice__content"
                                >
                                  NFV
                                </div>
                                <span
                                  className="ant-select-selection__choice__remove"
                                  onClick={[Function]}
                                >
                                  <Icon
                                    className="ant-select-remove-icon"
                                    type="close"
                                  >
                                    <LocaleReceiver
                                      componentName="Icon"
                                    >
                                      <i
                                        aria-label="icon: close"
                                        className="anticon anticon-close ant-select-remove-icon"
                                      >
                                        <IconReact
                                          className=""
                                          type="close-o"
                                        >
                                          <svg
                                            aria-hidden="true"
                                            className=""
                                            data-icon="close"
                                            fill="currentColor"
                                            focusable="false"
                                            height="1em"
                                            key="svg-close"
                                            viewBox="64 64 896 896"
                                            width="1em"
                                          >
                                            <path
                                              d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                                              key="svg-close-svg-0"
                                            />
                                          </svg>
                                        </IconReact>
                                      </i>
                                    </LocaleReceiver>
                                  </Icon>
                                </span>
                              </li>
                            </AnimateChild>
                            <AnimateChild
                              animation={Object {}}
                              key="MMD"
                              transitionAppear={false}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="zoom"
                            >
                              <li
                                className="ant-select-selection__choice"
                                key="MMD"
                                onMouseDown={[Function]}
                                role="presentation"
                                style={
                                  Object {
                                    "WebkitUserSelect": "none",
                                    "userSelect": "none",
                                  }
                                }
                                title="MMD"
                                unselectable="on"
                              >
                                <div
                                  className="ant-select-selection__choice__content"
                                >
                                  MMD
                                </div>
                                <span
                                  className="ant-select-selection__choice__remove"
                                  onClick={[Function]}
                                >
                                  <Icon
                                    className="ant-select-remove-icon"
                                    type="close"
                                  >
                                    <LocaleReceiver
                                      componentName="Icon"
                                    >
                                      <i
                                        aria-label="icon: close"
                                        className="anticon anticon-close ant-select-remove-icon"
                                      >
                                        <IconReact
                                          className=""
                                          type="close-o"
                                        >
                                          <svg
                                            aria-hidden="true"
                                            className=""
                                            data-icon="close"
                                            fill="currentColor"
                                            focusable="false"
                                            height="1em"
                                            key="svg-close"
                                            viewBox="64 64 896 896"
                                            width="1em"
                                          >
                                            <path
                                              d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                                              key="svg-close-svg-0"
                                            />
                                          </svg>
                                        </IconReact>
                                      </i>
                                    </LocaleReceiver>
                                  </Icon>
                                </span>
                              </li>
                            </AnimateChild>
                            <AnimateChild
                              animation={Object {}}
                              key="__input"
                              transitionAppear={false}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="zoom"
                            >
                              <li
                                className="ant-select-search ant-select-search--inline"
                                key="__input"
                              >
                                <div
                                  className="ant-select-search__field__wrap"
                                >
                                  <input
                                    autoComplete="off"
                                    className="ant-select-search__field"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    value=""
                                  />
                                  <span
                                    className="ant-select-search__field__mirror"
                                  >
                                     
                                  </span>
                                </div>
                              </li>
                            </AnimateChild>
                          </ul>
                        </Animate>
                      </div>
                    </div>
                  </div>
                </Trigger>
              </SelectTrigger>
            </Select>
          </Select>
        </div>
      </Trigger>
    </Tooltip>
  </Tooltip>
</AirfieldSearcher>
`;

exports[`AirfieldSearcher render as expected when is searching 1`] = `
<AirfieldSearcher
  airfields={
    Array [
      Object {
        "apicode": "ASP",
        "shortdisplayname": "Boston ASP",
      },
      Object {
        "apicode": "BDS",
        "shortdisplayname": "Bolivia BDS",
      },
    ]
  }
  clear={[Function]}
  clearSelectedData={[Function]}
  handleClearResults={[Function]}
  isSearching={true}
  onChange={[Function]}
  placeholder="From"
  search={[Function]}
  selectedData={
    Object {
      "ASP": Object {
        "shortdisplayname": "Boston ASP",
      },
      "BDS": Object {
        "shortdisplayname": "Bolivia BDS",
      },
    }
  }
  setSelectedData={[Function]}
  value={Array []}
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    mouseEnterDelay={1}
    mouseLeaveDelay={0.1}
    placement="top"
    title="Search for an airfield"
    transitionName="zoom-big-fast"
  >
    <Tooltip
      align={Object {}}
      arrowContent={null}
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      builtinPlacements={
        Object {
          "bottom": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      destroyTooltipOnHide={false}
      mouseEnterDelay={1}
      mouseLeaveDelay={0.1}
      onPopupAlign={[Function]}
      onVisibleChange={[Function]}
      overlay="Search for an airfield"
      placement="top"
      prefixCls="ant-tooltip"
      title="Search for an airfield"
      transitionName="zoom-big-fast"
      trigger={
        Array [
          "hover",
        ]
      }
      visible={false}
    >
      <Trigger
        action={
          Array [
            "hover",
          ]
        }
        afterPopupVisibleChange={[Function]}
        arrowContent={null}
        arrowPointAtCenter={false}
        autoAdjustOverflow={true}
        blurDelay={0.15}
        builtinPlacements={
          Object {
            "bottom": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tc",
                "bc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomLeft": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomRight": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "left": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cr",
                "cl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftBottom": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftTop": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "right": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cl",
                "cr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightBottom": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightTop": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "top": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bc",
                "tc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topLeft": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topRight": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
          }
        }
        defaultPopupVisible={false}
        destroyPopupOnHide={false}
        focusDelay={0}
        getDocument={[Function]}
        getPopupClassNameFromAlign={[Function]}
        hideAction={Array []}
        mask={false}
        maskClosable={true}
        mouseEnterDelay={1}
        mouseLeaveDelay={0.1}
        onPopupAlign={[Function]}
        onPopupVisibleChange={[Function]}
        overlay="Search for an airfield"
        popup={[Function]}
        popupAlign={Object {}}
        popupClassName=""
        popupPlacement="top"
        popupStyle={Object {}}
        popupTransitionName="zoom-big-fast"
        popupVisible={false}
        prefixCls="ant-tooltip"
        showAction={Array []}
        title="Search for an airfield"
        visible={false}
      >
        <div
          className="select-container"
          key="trigger"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
        >
          <Select
            choiceTransitionName="zoom"
            defaultActiveFirstOption={false}
            dropdownRender={[Function]}
            filterOption={false}
            mode="multiple"
            notFoundContent={
              <Spin
                size="small"
                spinning={true}
                wrapperClassName=""
              />
            }
            onBlur={[Function]}
            onChange={[Function]}
            onDeselect={[Function]}
            onSearch={[Function]}
            onSelect={[Function]}
            optionLabelProp="shortdisplayname"
            placeholder="From"
            showArrow={false}
            showSearch={true}
            style={
              Object {
                "minWidth": 250,
              }
            }
            transitionName="slide-up"
            value={Array []}
          >
            <Select
              allowClear={false}
              autoClearSearchValue={true}
              backfill={false}
              choiceTransitionName="zoom"
              className=""
              clearIcon={
                <Icon
                  className="ant-select-clear-icon"
                  theme="filled"
                  type="close-circle"
                />
              }
              combobox={false}
              defaultActiveFirstOption={false}
              defaultOpen={false}
              dropdownMatchSelectWidth={true}
              dropdownMenuStyle={Object {}}
              dropdownRender={[Function]}
              dropdownStyle={Object {}}
              filterOption={false}
              inputIcon={
                <Icon
                  className="ant-select-arrow-icon"
                  type="down"
                />
              }
              labelInValue={false}
              menuItemSelectedIcon={
                <Icon
                  className="ant-select-selected-icon"
                  type="check"
                />
              }
              multiple={true}
              notFoundContent={
                <Spin
                  size="small"
                  spinning={true}
                  wrapperClassName=""
                />
              }
              onBlur={[Function]}
              onChange={[Function]}
              onDeselect={[Function]}
              onFocus={[Function]}
              onInputKeyDown={[Function]}
              onSearch={[Function]}
              onSelect={[Function]}
              optionFilterProp="value"
              optionLabelProp="shortdisplayname"
              placeholder="From"
              prefixCls="ant-select"
              removeIcon={
                <Icon
                  className="ant-select-remove-icon"
                  type="close"
                />
              }
              showAction={
                Array [
                  "click",
                ]
              }
              showArrow={false}
              showSearch={true}
              style={
                Object {
                  "minWidth": 250,
                }
              }
              tabIndex={0}
              tags={false}
              tokenSeparators={Array []}
              transitionName="slide-up"
              value={Array []}
            >
              <SelectTrigger
                ariaId="test-uuid"
                backfillValue=""
                combobox={false}
                defaultActiveFirstOption={false}
                dropdownMatchSelectWidth={true}
                dropdownMenuStyle={Object {}}
                dropdownRender={[Function]}
                dropdownStyle={Object {}}
                empty={false}
                inputValue=""
                menuItemSelectedIcon={
                  <Icon
                    className="ant-select-selected-icon"
                    type="check"
                  />
                }
                multiple={true}
                onDropdownVisibleChange={[Function]}
                onMenuDeselect={[Function]}
                onMenuSelect={[Function]}
                onPopupFocus={[Function]}
                options={Array []}
                prefixCls="ant-select"
                showAction={
                  Array [
                    "click",
                  ]
                }
                showSearch={true}
                transitionName="slide-up"
                value={Array []}
                visible={false}
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  ariaId="test-uuid"
                  backfillValue=""
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                    }
                  }
                  combobox={false}
                  defaultActiveFirstOption={false}
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  dropdownMatchSelectWidth={true}
                  dropdownMenuStyle={Object {}}
                  dropdownRender={[Function]}
                  dropdownStyle={Object {}}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={
                    Array [
                      "blur",
                    ]
                  }
                  inputValue=""
                  mask={false}
                  maskClosable={true}
                  menuItemSelectedIcon={
                    <Icon
                      className="ant-select-selected-icon"
                      type="check"
                    />
                  }
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  multiple={true}
                  onDropdownVisibleChange={[Function]}
                  onMenuDeselect={[Function]}
                  onMenuSelect={[Function]}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  options={Array []}
                  popup={
                    <div>
                      <DropdownMenu
                        ariaId="test-uuid"
                        backfillValue=""
                        defaultActiveFirstOption={false}
                        dropdownMenuStyle={Object {}}
                        firstActiveValue={undefined}
                        inputValue=""
                        menuItemSelectedIcon={
                          <Icon
                            className="ant-select-selected-icon"
                            type="check"
                          />
                        }
                        menuItems={Array []}
                        multiple={true}
                        onMenuDeselect={[Function]}
                        onMenuSelect={[Function]}
                        onPopupFocus={[Function]}
                        onPopupScroll={undefined}
                        prefixCls="ant-select-dropdown"
                        value={Array []}
                        visible={false}
                      />
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName="ant-select-dropdown--multiple"
                  popupPlacement="bottomLeft"
                  popupStyle={Object {}}
                  popupTransitionName="slide-up"
                  popupVisible={false}
                  prefixCls="ant-select-dropdown"
                  showAction={
                    Array [
                      "click",
                    ]
                  }
                  showSearch={true}
                  transitionName="slide-up"
                  value={Array []}
                  visible={false}
                >
                  <div
                    className="ant-select ant-select-enabled ant-select-no-arrow"
                    key="trigger"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseUp={[Function]}
                    onTouchStart={[Function]}
                    style={
                      Object {
                        "minWidth": 250,
                      }
                    }
                  >
                    <div
                      aria-autocomplete="list"
                      aria-controls="test-uuid"
                      aria-expanded={false}
                      aria-haspopup="true"
                      className="ant-select-selection
                                ant-select-selection--multiple"
                      key="selection"
                      role="combobox"
                    >
                      <div
                        className="ant-select-selection__rendered"
                      >
                        <div
                          className="ant-select-selection__placeholder"
                          onClick={[Function]}
                          onMouseDown={[Function]}
                          style={
                            Object {
                              "WebkitUserSelect": "none",
                              "display": "block",
                              "userSelect": "none",
                            }
                          }
                          unselectable="on"
                        >
                          From
                        </div>
                        <Animate
                          animation={Object {}}
                          component="ul"
                          componentProps={Object {}}
                          onAppear={[Function]}
                          onEnd={[Function]}
                          onEnter={[Function]}
                          onLeave={[Function]}
                          transitionAppear={false}
                          transitionEnter={true}
                          transitionLeave={true}
                          transitionName="zoom"
                        >
                          <ul>
                            <AnimateChild
                              animation={Object {}}
                              key="__input"
                              transitionAppear={false}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="zoom"
                            >
                              <li
                                className="ant-select-search ant-select-search--inline"
                                key="__input"
                              >
                                <div
                                  className="ant-select-search__field__wrap"
                                >
                                  <input
                                    autoComplete="off"
                                    className="ant-select-search__field"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    value=""
                                  />
                                  <span
                                    className="ant-select-search__field__mirror"
                                  >
                                     
                                  </span>
                                </div>
                              </li>
                            </AnimateChild>
                          </ul>
                        </Animate>
                      </div>
                    </div>
                  </div>
                </Trigger>
              </SelectTrigger>
            </Select>
          </Select>
        </div>
      </Trigger>
    </Tooltip>
  </Tooltip>
</AirfieldSearcher>
`;
